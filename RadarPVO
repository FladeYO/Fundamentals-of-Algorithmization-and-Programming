#define NOMINMAX
#include <Windows.h>
#include <cmath>
#include <vector>
#include <string>
#include <ctime>
#include <thread>
#include <mutex>
#include <random>

#pragma comment(linker, "/SUBSYSTEM:WINDOWS")
#pragma comment(lib, "kernel32.lib")
#pragma comment(lib, "user32.lib")
#pragma comment(lib, "gdi32.lib")

// Конфигурация
const int WINDOW_WIDTH = 1200;
const int WINDOW_HEIGHT = 900;
const float FIELD_SIZE = 400.0f;
const float MISSILE_SPEED = 30.0f;  // Замедленная скорость ракет
const float RADAR_SPEED = 80.0f;    // Оптимизированная скорость радара
const float DETECTION_RADIUS = FIELD_SIZE;
const float DESTRUCTION_RADIUS = FIELD_SIZE * 0.75f;
const int TOTAL_MISSILES = 10;
const float BEAM_WIDTH = 20.0f;     // Немного шире луч для улучшения попаданий

// Цвета
const COLORREF BG_COLOR = RGB(30, 30, 40);
const COLORREF TEXT_COLOR = RGB(220, 220, 220);
const COLORREF SQUARE_COLOR = RGB(180, 180, 200);
const COLORREF DETECTION_COLOR = RGB(100, 150, 255);
const COLORREF DESTRUCTION_COLOR = RGB(255, 100, 100);
const COLORREF BEAM_COLOR = RGB(100, 255, 100);
const COLORREF MISSILE_COLOR = RGB(255, 200, 50);
const COLORREF DETECTED_MISSILE_COLOR = RGB(255, 100, 50);
const COLORREF DESTROYED_MISSILE_COLOR = RGB(150, 150, 150);

std::mutex data_mutex;
std::mt19937 rng;

// Проверка попадания в луч
bool InBeam(float px, float py, float ax, float ay, float bx, float by, float cx, float cy) {
    float d1 = (px - bx) * (ay - by) - (ax - bx) * (py - by);
    float d2 = (px - cx) * (by - cy) - (bx - cx) * (py - cy);
    float d3 = (px - ax) * (cy - ay) - (cx - ax) * (py - ay);
    bool has_neg = (d1 < 0) || (d2 < 0) || (d3 < 0);
    bool has_pos = (d1 > 0) || (d2 > 0) || (d3 > 0);
    return !(has_neg && has_pos);
}

class Missile {
public:
    float x, y;
    bool active, detected, destroyed, hit;
    int id;
    DWORD launchTime;

    Missile(float sx, float sy, int id) 
        : x(sx), y(sy), id(id), active(true), detected(false), 
          destroyed(false), hit(false) {
        launchTime = GetTickCount();
    }

    void Update(float dt) {
        if (!active || destroyed || hit) return;

        float dx = -x;
        float dy = -y;
        float len = sqrt(dx*dx + dy*dy);
        if (len > 0) {
            dx /= len;
            dy /= len;
        }

        x += dx * MISSILE_SPEED * dt;
        y += dy * MISSILE_SPEED * dt;

        if (sqrt(x*x + y*y) < 10.0f) hit = true;
    }

    float Distance() const { 
        return sqrt(x*x + y*y); 
    }
};

class Launcher {
public:
    float x, y;
    int launched, max_missiles;
    DWORD next_launch_time, start_delay;

    Launcher(float px, float py, int max) 
        : x(px), y(py), max_missiles(max), launched(0), next_launch_time(0) {
        std::uniform_int_distribution<int> delay(2000, 10000);
        start_delay = delay(rng);
    }

    bool CanLaunch() const {
        DWORD now = GetTickCount();
        if (launched >= max_missiles) return false;
        if (launched == 0 && now < start_delay) return false;
        if (launched > 0 && now < next_launch_time) return false;
        return true;
    }

    void Launch() {
        std::uniform_int_distribution<int> interval(3000, 8000);
        next_launch_time = GetTickCount() + interval(rng);
        launched++;
    }
};

class Radar {
public:
    float angle;
    bool destroyed;

    Radar() : angle(0.0f), destroyed(false) {}

    void Update(std::vector<Missile>& missiles, float dt) {
        if (destroyed) return;
        
        // Плавное вращение по часовой стрелке
        angle += RADAR_SPEED * dt;
        if (angle >= 360) angle -= 360;
        
        // Поиск целей в зоне поражения
        for (auto& missile : missiles) {
            if (missile.active && !missile.detected && 
                missile.Distance() <= DETECTION_RADIUS) {
                missile.detected = true;
            }
            
            if (missile.active && missile.detected && 
                missile.Distance() <= DESTRUCTION_RADIUS) {
                
                float rad = angle * 3.14159265f / 180.0f;
                float half_beam = BEAM_WIDTH * 3.14159265f / 360.0f;
                
                float cx = 0, cy = 0;
                float lx = DETECTION_RADIUS * cos(rad - half_beam);
                float ly = DETECTION_RADIUS * sin(rad - half_beam);
                float rx = DETECTION_RADIUS * cos(rad + half_beam);
                float ry = DETECTION_RADIUS * sin(rad + half_beam);
                
                if (InBeam(missile.x, missile.y, cx, cy, lx, ly, rx, ry)) {
                    missile.destroyed = true;
                }
            }
        }
    }
};

// Глобальные объекты
std::vector<Missile> missiles;
std::vector<Launcher> launchers;
Radar radar;
int next_id = 0;
int launched_count = 0;
int destroyed_count = 0;
int hit_count = 0;
bool is_running = true;

void SimulationThread(HWND hwnd) {
    while (is_running) {
        {
            std::lock_guard<std::mutex> lock(data_mutex);
            
            // Запуск ракет
            if (launched_count < TOTAL_MISSILES) {
                for (auto& launcher : launchers) {
                    if (launcher.CanLaunch()) {
                        launcher.Launch();
                        
                        // Случайное смещение запуска
                        std::uniform_real_distribution<float> offset(-30.0f, 30.0f);
                        float x = launcher.x + offset(rng);
                        float y = launcher.y + offset(rng);
                        
                        missiles.emplace_back(x, y, next_id++);
                        if (++launched_count >= TOTAL_MISSILES) break;
                    }
                }
            }
            
            // Обновление ракет
            for (auto& missile : missiles) {
                missile.Update(0.1f);
            }
            
            // Обработка результатов
            auto it = missiles.begin();
            while (it != missiles.end()) {
                if (it->destroyed) {
                    destroyed_count++;
                    it = missiles.erase(it);
                }
                else if (it->hit) {
                    hit_count++;
                    radar.destroyed = true;
                    it = missiles.erase(it);
                }
                else {
                    ++it;
                }
            }
        }
        
        InvalidateRect(hwnd, NULL, FALSE);
        Sleep(100);
    }
}

void RadarThread() {
    DWORD last_time = GetTickCount();
    
    while (is_running) {
        DWORD current_time = GetTickCount();
        float delta_time = (current_time - last_time) / 1000.0f;
        last_time = current_time;
        
        {
            std::lock_guard<std::mutex> lock(data_mutex);
            radar.Update(missiles, delta_time);
        }
        
        Sleep(10);
    }
}

void DrawRadarBeam(HDC hdc, int center_x, int center_y, float angle, float length) {
    float rad = angle * 3.14159265f / 180.0f;
    float half_beam = BEAM_WIDTH * 3.14159265f / 360.0f;
    
    POINT points[3] = {
        {center_x, center_y},
        {center_x + static_cast<int>(length * cos(rad - half_beam)), 
         center_y - static_cast<int>(length * sin(rad - half_beam))},
        {center_x + static_cast<int>(length * cos(rad + half_beam)), 
         center_y - static_cast<int>(length * sin(rad + half_beam))}
    };
    
    HBRUSH brush = CreateSolidBrush(BEAM_COLOR);
    HPEN pen = CreatePen(PS_SOLID, 1, BEAM_COLOR);
    HGDIOBJ old_brush = SelectObject(hdc, brush);
    HGDIOBJ old_pen = SelectObject(hdc, pen);
    
    Polygon(hdc, points, 3);
    
    SelectObject(hdc, old_brush);
    SelectObject(hdc, old_pen);
    DeleteObject(brush);
    DeleteObject(pen);
}

void DrawScene(HDC hdc) {
    int center_x = WINDOW_WIDTH / 2;
    int center_y = WINDOW_HEIGHT / 2;
    RECT client_rect;
    GetClientRect(WindowFromDC(hdc), &client_rect);
    
    // Фон
    HBRUSH bg_brush = CreateSolidBrush(BG_COLOR);
    FillRect(hdc, &client_rect, bg_brush);
    DeleteObject(bg_brush);
    
    // Защитная зона
    HPEN border_pen = CreatePen(PS_SOLID, 2, SQUARE_COLOR);
    HGDIOBJ old_pen = SelectObject(hdc, border_pen);
    MoveToEx(hdc, center_x + FIELD_SIZE, center_y + FIELD_SIZE, NULL);
    LineTo(hdc, center_x + FIELD_SIZE, center_y - FIELD_SIZE);
    LineTo(hdc, center_x - FIELD_SIZE, center_y - FIELD_SIZE);
    LineTo(hdc, center_x - FIELD_SIZE, center_y + FIELD_SIZE);
    LineTo(hdc, center_x + FIELD_SIZE, center_y + FIELD_SIZE);
    SelectObject(hdc, old_pen);
    DeleteObject(border_pen);
    
    // Зоны обнаружения и поражения
    HPEN dashed_pen = CreatePen(PS_DASH, 1, DETECTION_COLOR);
    SelectObject(hdc, dashed_pen);
    HGDIOBJ old_brush = SelectObject(hdc, GetStockObject(NULL_BRUSH));
    Ellipse(hdc, center_x - DETECTION_RADIUS, center_y - DETECTION_RADIUS, 
            center_x + DETECTION_RADIUS, center_y + DETECTION_RADIUS);
    DeleteObject(dashed_pen);
    
    dashed_pen = CreatePen(PS_DASH, 1, DESTRUCTION_COLOR);
    SelectObject(hdc, dashed_pen);
    Ellipse(hdc, center_x - DESTRUCTION_RADIUS, center_y - DESTRUCTION_RADIUS, 
            center_x + DESTRUCTION_RADIUS, center_y + DESTRUCTION_RADIUS);
    SelectObject(hdc, old_brush);
    DeleteObject(dashed_pen);
    
    // Луч радара
    if (!radar.destroyed) {
        DrawRadarBeam(hdc, center_x, center_y, radar.angle, DETECTION_RADIUS);
    }
    
    // Ракеты
    for (const auto& missile : missiles) {
        int x = center_x + static_cast<int>(missile.x);
        int y = center_y - static_cast<int>(missile.y);
        
        COLORREF color = missile.detected ? 
            (missile.destroyed ? DESTROYED_MISSILE_COLOR : DETECTED_MISSILE_COLOR) : 
            MISSILE_COLOR;
        
        HBRUSH missile_brush = CreateSolidBrush(color);
        HGDIOBJ old_brush = SelectObject(hdc, missile_brush);
        Ellipse(hdc, x - 5, y - 5, x + 5, y + 5);
        SelectObject(hdc, old_brush);
        DeleteObject(missile_brush);
    }
    
    // Статус
    SetTextColor(hdc, TEXT_COLOR);
    SetBkMode(hdc, TRANSPARENT);
    RECT status_rect = { 20, 20, 400, 100 };
    std::wstring status_text = radar.destroyed ? L"РАДАР УНИЧТОЖЕН!\n" : L"Статус: Работает\n";
    status_text += L"Сбито: " + std::to_wstring(destroyed_count) + 
                   L" Прорвалось: " + std::to_wstring(hit_count);
    DrawText(hdc, status_text.c_str(), -1, &status_rect, DT_LEFT);
    
    // Счетчик сбитых ракет
    if (destroyed_count > 0) {
        RECT counter_rect = { center_x - 100, center_y - 50, center_x + 100, center_y + 50 };
        HFONT big_font = CreateFont(60, 0, 0, 0, FW_BOLD, 0, 0, 0, 0, 0, 0, 0, 0, L"Arial");
        HGDIOBJ old_font = SelectObject(hdc, big_font);
        SetTextColor(hdc, BEAM_COLOR);
        std::wstring counter_text = L"Сбито: " + std::to_wstring(destroyed_count);
        DrawText(hdc, counter_text.c_str(), -1, &counter_rect, DT_CENTER | DT_VCENTER);
        SelectObject(hdc, old_font);
        DeleteObject(big_font);
    }
}

LRESULT CALLBACK WindowProc(HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam) {
    switch (msg) {
    case WM_CREATE:
        {
            std::random_device rd;
            rng.seed(rd());
            
            // Случайное положение пусковых установок
            std::uniform_real_distribution<float> pos_offset(-50.0f, 50.0f);
            
            launchers.emplace_back(FIELD_SIZE + pos_offset(rng), FIELD_SIZE + pos_offset(rng), 3);
            launchers.emplace_back(FIELD_SIZE + pos_offset(rng), -FIELD_SIZE + pos_offset(rng), 3);
            launchers.emplace_back(-FIELD_SIZE + pos_offset(rng), -FIELD_SIZE + pos_offset(rng), 2);
            launchers.emplace_back(-FIELD_SIZE + pos_offset(rng), FIELD_SIZE + pos_offset(rng), 2);
            
            std::thread(SimulationThread, hwnd).detach();
            std::thread(RadarThread).detach();
        }
        break;
        
    case WM_PAINT:
        {
            PAINTSTRUCT ps;
            HDC hdc = BeginPaint(hwnd, &ps);
            DrawScene(hdc);
            EndPaint(hwnd, &ps);
        }
        break;
        
    case WM_DESTROY:
        is_running = false;
        PostQuitMessage(0);
        break;
        
    default:
        return DefWindowProc(hwnd, msg, wparam, lparam);
    }
    return 0;
}

int WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE, LPWSTR, int cmd_show) {
    WNDCLASSEX wc = { sizeof(WNDCLASSEX) };
    wc.style = CS_HREDRAW | CS_VREDRAW;
    wc.lpfnWndProc = WindowProc;
    wc.hInstance = hInstance;
    wc.hCursor = LoadCursor(NULL, IDC_ARROW);
    wc.hbrBackground = (HBRUSH)CreateSolidBrush(BG_COLOR);
    wc.lpszClassName = L"RadarDefense";
    
    RegisterClassEx(&wc);
    
    // Центрирование окна
    int screen_width = GetSystemMetrics(SM_CXSCREEN);
    int screen_height = GetSystemMetrics(SM_CYSCREEN);
    int window_x = (screen_width - WINDOW_WIDTH) / 2;
    int window_y = (screen_height - WINDOW_HEIGHT) / 2;
    
    HWND hwnd = CreateWindow(wc.lpszClassName, L"Система ПВО", WS_OVERLAPPEDWINDOW,
                             window_x, window_y, WINDOW_WIDTH, WINDOW_HEIGHT, 
                             NULL, NULL, hInstance, NULL);
    
    ShowWindow(hwnd, cmd_show);
    UpdateWindow(hwnd);
    
    MSG msg;
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }
    
    return static_cast<int>(msg.wParam);
}
